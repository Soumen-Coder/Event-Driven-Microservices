package com.microservices.base.twitter.to.kafka.service;

import com.microservices.base.twitter.to.kafka.service.init.StreamInitializer;
import com.microservices.base.twitter.to.kafka.service.runner.StreamRunner;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationEvent;
import org.springframework.context.annotation.ComponentScan;

import javax.annotation.PostConstruct;

@SpringBootApplication //Combination of three annotations - @EnableAutoConfiguration, @Configuration and @ComponentScan
@ComponentScan(basePackages = "com.microservices.base")
public class TwitterToKafkaServiceApplication implements CommandLineRunner {

    private static final Logger LOG = LoggerFactory.getLogger(TwitterToKafkaServiceApplication.class); // it will mention the class name during logging

    //private final TwitterToKafkaServiceConfigData configData;
    private final StreamInitializer streamInitializer;

    private final StreamRunner streamRunner;

    //This is a constructor injection - more robust and thread-safe application creation
    //We haven't used @Autowired which is used with field injection.
    //We are sure that TwitterToKafkaServiceConfigData will be initialized as soon as the main method runs.
    //Constructor injection has some advantages over field injection.
    //Field Injection uses reflection which basically slows down a program since types are resolved at runtime.
    //Forces object creation with the injected object.
    //Constructor injection favors immutability which is more stable

    public TwitterToKafkaServiceApplication(StreamInitializer streamInitializer, StreamRunner streamRunner) {
        //this.configData = configData;
        this.streamInitializer = streamInitializer;
        this.streamRunner = streamRunner;
    }

    public static void main(String[] args) {
        SpringApplication.run(TwitterToKafkaServiceApplication.class, args);
    }

    //Finding a way to trigger the reading logic, since this service will not be triggered by a client
    // 1. PostConstruct - invoked after the application is run
    // 2. ApplicationListener interface overriding OnApplicationEvent method
    // 3. CommandLineRunner interface accepts array of arguments - best
    // 4. EventListener
    /*@PostConstruct
    public void init(){
        //invoked after the application is run and spring beans created, and by default, spring beans are singleton(created once)
        //we can change default behaviour by @Scope annotation, if we set the @Scope("request"), for each new request, a new bean will be created.
        //init method runs in each request after each object creation separately, not good option for application initialization logic.
    }*/
    /*@Override
    public void onApplicationEvent(ApplicationEvent applicationEvent){

    }*/
    @Override
    public void run(String... args) throws Exception {
        LOG.info("App Starting!!!");
        //LOG.info(Arrays.toString(configData.getTwitterKeywords().toArray(new String[] {})));
        //LOG.info(configData.getWelcomeMessage());
        streamInitializer.init();
        LOG.info("Starting to read Twitter Messages :: ");
        streamRunner.start();
    }
}
 //run mvn clean install -> to check if we have successful build, clean -> cleans the files generated by mvn during it's build and install -> install project into local repo.
 // run mvn install -DskipTests -> to skip the contextLoad test since when we run the application, it tries to search for a kafka cluster, we need the kafka cluster up and running, if it doesn't find it fails the test and app build fails as we don't have a mock kafka cluster running inside the test.