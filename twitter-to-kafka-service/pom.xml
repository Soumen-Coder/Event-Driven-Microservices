<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <parent>
    <artifactId>microservices-base</artifactId>
    <groupId>com.microservices.base</groupId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>twitter-to-kafka-service</artifactId>
  <name>twitter-to-kafka-service</name>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
    </dependency>
    <!--to use spring cloud config server -->
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-config</artifactId>
    </dependency>
    <!-- adds a basic authentication automatically-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.twitter4j</groupId>
      <artifactId>twitter4j-stream</artifactId>
    </dependency>
    <dependency>
      <groupId>com.microservices.base</groupId>
      <artifactId>app-config-data</artifactId>
    </dependency>
    <dependency>
      <groupId>com.microservices.base</groupId>
      <artifactId>kafka-admin</artifactId>
    </dependency>
    <dependency>
      <groupId>com.microservices.base</groupId>
      <artifactId>kafka-producer</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId> <!-- creating docker image for twitter-kafka-service by spring-boot-maven-plugin -->
        <configuration>
          <image>
            <name>${project.groupId}/twitter.to.kafka.service:${project.version}</name>
          </image>
        </configuration>
        <executions>
          <execution>
            <phase>install</phase><!--we want to create the docker image when we run the mvn install command-->
            <goals>
              <goal>build-image</goal> <!-- creates docker image for us -->
            </goals>
          </execution>
        </executions>
        </plugin>
      </plugins>
  </build>

</project>
<!-- build image follows a layered approach and it prevents two overheads
first it prevents creation of single fat jar and it use caching during image update, so it prevents updating the whole jar
This is achieved with help of "Cloud Native Buildpacks" check more at -> buildpacks.io
Layering is done to separate the code based on how likely it changes during application builds->Library code is less likely to change, on the other hand
Application code is more likely to change so it places it in a separated isolated layer and rest which doesn't change much they are placed in different layer hence reusing layers and caching results during creation and updates-->